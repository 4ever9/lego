@import "media";

$breakpoints: (md:768px, lg:992px, xl:1200px);
$container-max-widths: (md: 720px, lg: 960px, xl: 1140px);
$grid-gap: 30px;

// Grid system container
@mixin container($name: container,
  $breakpoints: $breakpoints,
  $container-max-widths: $container-max-widths,
  $grid-gap: $grid-gap) {

  .#{$name} {
    width: auto;
    margin: 0 auto;
    padding-left: $grid-gap / 2;
    padding-right: $grid-gap / 2;
  }

  @each $breakpoint, $width in $breakpoints {
    $max: map-get($container-max-widths, $breakpoint);
    @include media-up($width) {
      .#{$name} {
        max-width: $max;
      }
    }
  }
}

@mixin row($name: row, $grid-gap: $grid-gap) {
  .#{$name} {
    display: flex;
    flex-wrap: wrap;
    min-width: 100%;
    margin-left: ($grid-gap / -2);
    margin-right: ($grid-gap / -2);
  }
}

@mixin column($name: column, $grid-gap: $grid-gap) {
  .#{$name} {
    display: block;
    flex-basis: 0;
    flex-grow: 1;
    flex-shrink: 1;
    padding-left: ($grid-gap / 2);
    padding-right: ($grid-gap / 2);
  }
}

@mixin gen-grids-with-ratio($prefix: is, $breakpoints: $breakpoints, $ratios: ()) {
  @each $n, $d in $ratios {
    .#{$prefix}-#{$n}-#{$d} {
      flex: 0 0 percentage($n / $d);
      max-width: percentage($n / $d);
    }
  }

  @each $breakpoint, $width in $breakpoints {
    @include media-up($width) {
      @each $n, $d in $ratios {
        .#{$prefix}-#{$breakpoint}-#{$n}-#{$d} {
          flex: 0 0 percentage($n / $d);
          max-width: percentage($n / $d);
        }
      }
    }
  }
}

@mixin gen-grids($prefix: is, $number: 12, $breakpoints: $breakpoints, $grid-gap: $grid-gap) {
  @if $number > 0 {
    @for $i from 1 through $number {
      .#{$prefix}-#{$i} {
        flex: 0 0 percentage($i / $number);
        max-width: percentage($i / $number);
      }
    }

    @each $breakpoint, $width in $breakpoints {
      @include media-up($width) {
        @for $i from 1 through $number {
          .#{$prefix}-#{$breakpoint}-#{$i} {
            flex: 0 0 percentage($i / $number);
            max-width: percentage($i / $number);
          }
        }
      }
    }
  }
}

@mixin offset($name: is-offset, $column-number: 12, $breakpoints: $breakpoints) {
  @for $i from 1 through $column-number {
    .#{$name}-#{$i} {
      margin-left: percentage($i / $column-number);
    }
  }
}